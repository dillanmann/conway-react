{"version":3,"sources":["Components/Grid.js","Utils/GridHandler.js","Utils/GameOfLifeSimulator.js","Components/App.js","serviceWorker.js","index.js"],"names":["Grid","props","className","grid","map","row","i","key","col","j","onClick","tileClicked","autoBind","require","GridHandler","width","height","onGridUpdated","gridUpdated","this","initialiseGrid","enableTileChanges","Array","propogateState","x","y","state","GameOfLifeSimulator","frame","_","index","length","aliveNeighbours","getAliveNeighbours","isAlive","calculateNextState","indexOffsets","gridHeight","gridWidth","forEach","xOffset","yOffset","isSafeIndex","App","simulationRunning","tickIntervalMillis","widths","heights","simulationIntervalId","simulator","gridHandler","setState","event","value","parseInt","target","resetGrid","stopSimulation","startSimulation","intervalMillis","setEnableTileChanges","setInterval","newFrame","simulateTick","replaceGridContent","console","log","clearInterval","htmlFor","name","id","type","step","max","min","size","onChange","tickIntervalChange","widthChange","disabled","v","heightChange","toggleSimulationState","flipTileState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.171be946.chunk.js","sourcesContent":["import React from 'react';\nimport './Grid.css';\n\nfunction Grid(props) {\n    return (\n        <div className='tile-grid'>\n            {\n                props.grid.map((row, i) =>\n                    (\n                        <div className='tile-row' key={`row-${i}`}>\n                            {row.map((col, j) => (\n                                <div className='tile-column' key={j}>\n                                    <div\n                                        className={`tile tile-${props.grid[i][j] ? 'alive' : 'dead'}`}\n                                        onClick={() => props.tileClicked(i, j)}>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    ))}\n        </div>\n    );\n}\n\nexport default Grid;","const autoBind = require('auto-bind');\n\nclass GridHandler {\n    constructor(width, height, onGridUpdated) {\n        this.grid = this.initialiseGrid(width, height);\n        this.gridUpdated = onGridUpdated;\n        this.enableTileChanges = true;\n        autoBind(this);\n    }\n    // Default definition to allow over-ride and context binding\n    gridUpdated = () => null;\n    initialiseGrid(width, height) {\n        return [...Array(width)].map(\n            () => [...Array(height)].map(\n                () => false\n            )\n        );\n    }\n    resetGrid(width, height, propogateState = true) {\n        this.grid = this.initialiseGrid(width, height);\n        if (propogateState){\n            this.gridUpdated();\n        }\n\n        this.enableTileChanges = true;\n    }\n    flipTileState(x, y) {\n        if (!this.enableTileChanges){\n            return;\n        }\n\n        this.grid[x][y] = !this.grid[x][y];\n        this.gridUpdated();\n    }\n    setEnableTileChanges(state){\n        this.enableTileChanges = state;\n        this.gridUpdated();\n    }\n    replaceGridContent(grid){\n        this.grid = grid;\n        this.gridUpdated();\n    }\n}\n\nexport default GridHandler;","const autoBind = require('auto-bind');\n\nclass GameOfLifeSimulator {\n    constructor(){\n        autoBind(this);\n    }\n    simulateTick(grid){\n        const frame = grid.map((_, index) => [...grid[index]]);\n\n        for (let row = 0; row < frame.length; ++row)\n        {\n            for (let col = 0; col < frame[row].length; ++col)\n            {\n                const aliveNeighbours = this.getAliveNeighbours(grid, row, col);\n                const isAlive = this.calculateNextState(grid[row][col], aliveNeighbours);\n                frame[row][col] = isAlive;\n            }\n        }\n\n        return frame;\n    }\n    getAliveNeighbours(grid, row, col){\n        let aliveNeighbours = 0;\n        const indexOffsets = [-1, 0, 1]\n        const gridHeight = grid.length;\n        const gridWidth = grid[row].length;\n\n        indexOffsets.forEach(xOffset => {\n            // Skip 0 offset if x offset is already 0 to avoid self\n            const yOffsets = xOffset === 0 ? [-1, 1] : indexOffsets;\n            yOffsets.forEach(yOffset => {\n                if(this.isSafeIndex(row+yOffset, col+xOffset, gridHeight, gridWidth) && grid[row+yOffset][col+xOffset]){\n                    aliveNeighbours += 1;\n                }\n            });\n        });\n\n        return aliveNeighbours;\n    }\n    isSafeIndex(x, y, width, height){\n        return x >= 0 && x < width && y >= 0 && y < height;\n    }\n    calculateNextState(isAlive, aliveNeighbours){\n        if (isAlive){\n            return aliveNeighbours === 2 || aliveNeighbours === 3;\n        }\n\n        return aliveNeighbours === 3;\n    }\n}\n\nexport default GameOfLifeSimulator;\n","import React from 'react';\nimport './App.css';\nimport Grid from './Grid';\nimport GridHandler from '../Utils/GridHandler';\nimport GameOfLifeSimulator from '../Utils/GameOfLifeSimulator';\nconst autoBind = require('auto-bind');\n\nconst StartSimulationText = 'Simulate';\nconst StopSimulationText = 'Stop';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      width: 20,\n      height: 20,\n      simulationRunning: false,\n      tickIntervalMillis: 500\n    };\n    this.widths = [10, 20, 30];\n    this.heights = [10, 20, 30];\n    this.simulationIntervalId = 0;\n    this.simulator = new GameOfLifeSimulator();\n    this.gridHandler = new GridHandler(this.state.width, this.state.height, () => this.setState(this.state));\n    autoBind(this);\n  }\n  heightChange(event){\n    const value = parseInt(event.target.value);\n    this.setState({height: value});\n    this.gridHandler.resetGrid(this.state.width, value, false);\n  }\n  widthChange(event){\n    const value = parseInt(event.target.value);\n    this.setState({width: value});\n    this.gridHandler.resetGrid(value, this.state.height, false);\n  }\n  tickIntervalChange(event){\n    const value = event.target.value;\n    this.setState({tickIntervalMillis: value}, () => {\n      if (this.state.simulationRunning){\n        this.stopSimulation();\n        this.startSimulation(value);\n      }\n    });\n  }\n  toggleSimulationState(){\n    if (this.state.simulationRunning){\n      this.stopSimulation();\n    } else {\n      this.startSimulation(this.state.tickIntervalMillis);\n    }\n  }\n  startSimulation(intervalMillis){\n    this.gridHandler.setEnableTileChanges(false);\n    this.setState({simulationRunning: true});\n    try {\n      this.simulationIntervalId = setInterval(() => {\n        const newFrame = this.simulator.simulateTick(this.gridHandler.grid);\n        this.gridHandler.replaceGridContent(newFrame);\n      }, intervalMillis);\n    }\n    catch {\n      console.log('something went wrong with the simulation');\n    }\n  }\n  stopSimulation(){\n    this.gridHandler.setEnableTileChanges(true);\n    this.setState({simulationRunning: false});\n    clearInterval(this.simulationIntervalId);\n  }  \n  render() {\n    return (\n      <div className='app'>\n        <div className='input-container'>\n          <label htmlFor='tickInterval'>Tick Interval (ms)</label>          \n          <input name='tickInterval' id='tickInterval' type='number' value={this.state.tickIntervalMillis}\n              step='100' max='5000' min='100' size='4' onChange={this.tickIntervalChange} />\n          <label htmlFor='width'>Width</label>\n          <select name='width' id='width' value={this.state.width} onChange={this.widthChange} disabled={this.state.simulationRunning}>\n            {this.widths.map((v) => (<option value={v} key={v}>{v}</option>))}\n          </select>\n          <label htmlFor='height'>Height</label>\n          <select name='height' id='height' value={this.state.height} onChange={this.heightChange} disabled={this.state.simulationRunning}>\n            {this.widths.map((v) => (<option value={v} key={v}>{v}</option>))}\n          </select>\n          <input\n            type='button'\n            value={this.state.simulationRunning ? StopSimulationText : StartSimulationText}\n            onClick={this.toggleSimulationState}/>\n          <input\n            type='button'\n            value='Reset'\n            onClick={() => this.gridHandler.resetGrid(this.state.width, this.state.height)}\n            disabled={this.state.simulationRunning} />\n        </div>\n        <Grid grid={this.gridHandler.grid} tileClicked={this.gridHandler.flipTileState} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}